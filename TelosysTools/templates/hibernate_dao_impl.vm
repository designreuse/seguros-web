/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

import java.util.List;
import java.util.Map;
#foreach( $import in $entity.importsForKeyFields )
import $import;
#end
import javax.annotation.PostConstruct;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import org.hibernate.Criteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;

import ${ROOT_PKG}.${entity.name.toLowerCase()}.model.${entity.name};
import ${ROOT_PKG}.${entity.name.toLowerCase()}.dao.${entity.name}Dao;
import ${ROOT_PKG}.${entity.name.toLowerCase()}.dto.${entity.name}Dto;
import ${ROOT_PKG}.dao.AbstractHibernateDao;
#set($keyType='Integer')
#if($entity.keyAttributes.size()>0)
#if($entity.keyAttributes[0].type=='int')#set($keyType='Integer')
#elseif($entity.keyAttributes[0].type=='long')#set($keyType='Long')
#end
#end
/**
 * Basic persistence operations for entity "${entity.name}"
 * 
 *
 * @author Lisandro
 *
 */
@Repository("${entity.name.toLowerCase()}Dao")
public class ${entity.name}DaoImpl extends AbstractHibernateDao<${entity.name},$keyType> implements ${entity.name}Dao{

	@PostConstruct
	public void setInstance() {
		setClazz(${entity.name}.class);
	}
	@Override
	@Transactional
	public List<${entity.name}> findByName(String name) {
		Criteria criteria = getCurrentSession().createCriteria((${entity.name}.class));
		criteria.add(Restrictions.like("name", name.toUpperCase(), MatchMode.ANYWHERE));
		return (List<${entity.name}>) criteria.list();
	}
	@Override
	@Transactional
	public List<${entity.name}> find(${entity.name}Dto dto) {
		Criteria criteria = getPaginationCriteria(dto);
		//TODO:add additional criteria
		return (List<${entity.name}>) criteria.list();
	}
	@Override
	@Transactional
	public Page<${entity.name}Dto> findPage(${entity.name}Dto dto) {
		Page<${entity.name}Dto> page = new Page<${entity.name}Dto>();
		page.setPage(dto.getPage());
		Criteria criteria = getCriteria();
		//
		ScrollableResults scrollable = criteria.scroll();
		if (scrollable.last()) {
			page.setTotalCount(scrollable.getRowNumber() + 1);
		}
		criteria = getPaginationCriteria(dto, criteria);
		criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
		//
		// // TODO:add additional criteria
		List<${entity.name}Dto> data = new ArrayList<${entity.name}Dto>();
		for (${entity.name} e : (List<${entity.name}>) criteria.list()) {
			${entity.name}Dto ent = BeanUtils.copyProperties(e, ${entity.name}Dto.class);
			data.add(ent);
		}
		page.setData(data);
		page.setSuccess(true);
		// // return (List<Modules>) criteria.list();
		return page;
	}
}
