## MAP : key = Java Type, value = MockValues method name 
#set ( $map = { 
  "byte"   : "chance.integer({min:-128,max:127})",     "java.lang.Byte"    : "chance.integer({min:-128,max:127})",  
  "short"  : "chance.integer({min:-32768,max:32767})",    "java.lang.Short"   : "chance.integer({min:-32768,max:32767})", 
  "int"    : "chance.integer({min:-2147483648,max:2147483647})",  "java.lang.Integer" : "chance.integer({min:-2147483648,max:2147483647})", 
  "long"   : "chance.integer({min:-9223372036854775808,max:9223372036854775807})",     "java.lang.Long"    : "chance.integer({min:-9223372036854775808,max:9223372036854775807})", 
  "float"  : "chance.floating({fixed: 2})",    "java.lang.Float"   : "chance.floating({fixed: 2})", 
  "double" : "chance.floating({fixed: 2})",   "java.lang.Double"  : "chance.floating({fixed: 2})", 
  "java.math.BigDecimal" : "chance.floating({fixed: 2})", 
  "java.util.Date"       : "Ext.Date.format(chance.date(),'d-m-Y')", 
  "java.sql.Date"        : "Ext.Date.format(chance.date(),'d-m-Y')", 
  "java.sql.Time"        : "chance.hammertime()", 
  "java.sql.Timestamp"   : "chance.hammertime()"
} )
## ------------------------------------------------------------------
#macro( mockMethod $field )
#if ( $field.type == "String" )
#set ( $methodName = "chance.string({max:$field.databaseSize})" )
#else
#set ( $methodName = $map.get(${field.fullType}) )
#end
${methodName}#end
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------

/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
app.model.${entity.name}.createMockInstance=function(){
	var entity = this.createMockInstanceWithoutLinks();
	#foreach( $link in $linkFields )		
	entity.${link.name} : ${link.linkType}Mock.createInstance();
	#end
	return entity;
}
app.model.${entity.name}.createMockInstanceWithoutLinks=function(){
	return Ext.create('app.model.${entity.name}',{
	#foreach( $field in $dataFields )
		${field.name} : #mockMethod($field) #if( $foreach.hasNext),
#end
	#end

	});
}
app.model.${entity.name}.createList=function(amount){
	var arr=new Array();
	for(int=0;i<=amount;i++){
		arr.push(this.createMockInstance());
	}
	return arr;
}
app.model.${entity.name}.createListWithoutLinks=function(amount){
	var arr=new Array();
	for(int=0;i<=amount;i++){
		arr.push(this.createMockInstanceWithoutLinks());
	}
	return arr;
}