/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
## ----------------------------------------------------------------------

## ----------------------------------------------------------------------

package ${target.javaPackageFromFolder($SRC)};

#foreach( $import in $entity.importsForKeyFields )
import $import;
#end

import $entity.fullName ;
#if ( $entity.hasCompositePrimaryKey() )
import ${entity.fullName}Key ;
#end
import ${ROOT_PKG}.persistence.commons.jpa.GenericJpaService;
import ${ROOT_PKG}.persistence.services.${entity.name}Persistence;

/**
 * JPA implementation for basic persistence operations ( entity "${entity.name}" )
 * 
 * @author Telosys Tools Generator
 *
 */
#if ( $entity.hasCompositePrimaryKey() )
		#set( $primaryKeyType = "${entity.name}Key" )
	#elseif (!${entity.keyAttributes.empty})  
		#set( $primaryKeyType = $entity.keyAttributes[0].wrapperType )
	#else 
		#set( $primaryKeyType = "Integer" )
	#end
public class ${entity.name}ServiceImpl extends Service<${entity.name}, $primaryKeyType> implements ${entity.name}Persistence {

	/**
	 * Constructor
	 */
	public ${entity.name}ServiceImpl() {
		super(${entity.name}.class);
	}

	public ${entity.name} load( $fn.argumentsListWithType( $entity.keyAttributes ) ) {
#if ( $entity.hasCompositePrimaryKey() )
		// Build the composite key
		$primaryKeyType key = new $primaryKeyType( $fn.argumentsList( $entity.keyAttributes ) );
		return super.load( key );
#else
		return super.load( $fn.argumentsList( $entity.keyAttributes ) );
#end	
	}

	public boolean delete( $fn.argumentsListWithType( $entity.keyAttributes ) ) {
#if ( $entity.hasCompositePrimaryKey() )
		// Build the composite key
		$primaryKeyType key = new $primaryKeyType( $fn.argumentsList( $entity.keyAttributes ) );
		return super.delete( key );
#else
		return super.delete( $fn.argumentsList( $entity.keyAttributes ) );
#end	
	}

	public boolean delete(${entity.name} entity) {
		if ( entity != null ) {
#if ( $entity.hasCompositePrimaryKey() )
			// Build the composite key
			$primaryKeyType key = new $primaryKeyType( $fn.argumentsListWithGetter( "entity", $entity.keyAttributes ) );
			return super.delete( key );
#else
			return super.delete( $fn.argumentsListWithGetter( "entity", $entity.keyAttributes ) );
#end	
		}
		return false ;
	}

}
