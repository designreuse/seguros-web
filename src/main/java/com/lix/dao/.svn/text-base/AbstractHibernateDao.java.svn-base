package com.lix.dao;

import java.io.Serializable;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.lix.dto.PaginationParams;
import com.lix.dto.Sort;

public abstract class AbstractHibernateDao<T extends Serializable, K extends Serializable> implements HibernateDao<T, K> {

	private final static Logger LOGGER = LoggerFactory.getLogger(AbstractHibernateDao.class);
	private Class<T> clazz;

	@Autowired
	SessionFactory sessionFactory;

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.vtours.scheduler.dao.HibernateDao#setClazz(java.lang.Class)
	 */
	@Override
	public void setClazz(final Class<T> clazzToSet) {
		clazz = clazzToSet;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.vtours.scheduler.dao.HibernateDao#findOne(long)
	 */
	@Override
	@Transactional
	public T findOne(final K id) {
		return (T) getCurrentSession().get(clazz, id);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.vtours.scheduler.dao.HibernateDao#findAll()
	 */
	@SuppressWarnings("unchecked")
	@Override
	@Transactional
	public List<T> findAll() {
		return getCurrentSession().createQuery("from " + clazz.getName()).list();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.vtours.scheduler.dao.HibernateDao#save(T)
	 */
	@Override
	@Transactional
	public void save(final T entity) {
		getCurrentSession().persist(entity);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.vtours.scheduler.dao.HibernateDao#update(T)
	 */
	@Override
	@Transactional
	public T update(final T entity) {
		return (T) getCurrentSession().merge(entity);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.vtours.scheduler.dao.HibernateDao#delete(T)
	 */
	@Override
	@Transactional
	public void delete(final T entity) {
		getCurrentSession().delete(entity);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see de.vtours.scheduler.dao.HibernateDao#deleteById(long)
	 */
	@Override
	@Transactional
	public void deleteById(final K id) {
		final T entity = findOne(id);
		delete(entity);
	}

	protected final Session getCurrentSession() {
		return sessionFactory.getCurrentSession();
	}

	@Transactional
	public void saveOrUpdate(T entity) {
		getCurrentSession().saveOrUpdate(entity);
	};

	@Override
	@Transactional
	public List<T> findByQuery(String query) {
		return getCurrentSession().createQuery(query).list();
	}

	/**
	 * Post-Construct method
	 */
	public abstract void setInstance();

	public Criteria getCriteria() {
		return sessionFactory.getCurrentSession().createCriteria(clazz);
	}

	@Override
	@Transactional
	public List<T> getPage(PaginationParams params) {
		String hql = "from " + clazz.getName();
		if (params.getSorting() != null && params.getSorting().size() > 0) {
			for (Sort s : params.getSorting()) {
				hql += "  r order by r." + s.getProperty() + " " + s.getDirection();
			}
		}
		LOGGER.info("executing query: {} ", hql);
		return getCurrentSession().createQuery(hql).setMaxResults(params.getLimit()).setFirstResult(params.getStart()).list();
	}

	/**
	 * @param dto
	 * @return
	 */
	protected Criteria getPaginationCriteria(PaginationParams dto) {
		Criteria criteria = getCriteria();
		if (dto.getLimit() != null) {
			criteria.setMaxResults(dto.getLimit());
		}
		if (dto.getStart() != null) {
			criteria.setFirstResult(dto.getStart());
		}
		if (dto.getSorting() != null && dto.getSorting().size() > 0) {
			for (Sort sort : dto.getSorting()) {
				String property = sort.getProperty();
				if (PaginationParams.ORDER_ASC.equalsIgnoreCase(sort.getDirection())) {
					criteria.addOrder(Order.asc(property));
				} else if (PaginationParams.ORDER_ASC.equalsIgnoreCase(sort.getDirection())) {
					criteria.addOrder(Order.desc(property));
				}
			}
		}
		return criteria;
	}
}
