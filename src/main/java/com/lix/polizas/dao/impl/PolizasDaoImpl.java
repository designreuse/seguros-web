/*
4 * Created on 28 nov 2013 ( Time 16:19:02 )
 * Generated by Telosys Tools Generator ( version 2.0.6 )
 */
package com.lix.polizas.dao.impl;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;

import org.hibernate.Criteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.lix.dao.AbstractHibernateDao;
import com.lix.polizas.dao.PolizasDao;
import com.lix.polizas.model.Polizas;

/**
 * Basic persistence operations for entity "Polizas"
 * 
 * 
 * @author Lisandro
 * 
 */
@Repository("polizasDao")
public class PolizasDaoImpl extends AbstractHibernateDao<Polizas, Integer> implements PolizasDao {

	@PostConstruct
	public void setInstance() {
		setClazz(Polizas.class);
	}

	@Override
	@Transactional
	public List<Polizas> findByName(String name) {
		Criteria criteria = getCurrentSession().createCriteria((Polizas.class));
		criteria.add(Restrictions.like("name", name.toUpperCase(), MatchMode.ANYWHERE));
		return (List<Polizas>) criteria.list();
	}

	@Override
	@Transactional
	public List<Polizas> polizasPorCliente(Integer id) {
		Criteria criteria = getCurrentSession().createCriteria((Polizas.class));
		criteria.add(Restrictions.eq("clientes.id", id));
		return (List<Polizas>) criteria.list();

	}

	@Override
	@Transactional
	public List<Polizas> getPolizasPorVencer(Date fechaDesde, Date fechaHasta) {
		Criteria crit=getCriteria();
		
		Calendar desde=Calendar.getInstance();
		desde.setTime(fechaHasta);
		desde.set(Calendar.HOUR_OF_DAY, 0);
		desde.set(Calendar.MINUTE, 0);
		desde.set(Calendar.SECOND, 0);
		
		Calendar hasta=Calendar.getInstance();
		hasta.setTime(fechaDesde);
		hasta.set(Calendar.HOUR_OF_DAY, 23);
		hasta.set(Calendar.MINUTE, 59);
		hasta.set(Calendar.SECOND, 59);
		
//		crit.add(Restrictions.between("fVigHasta", desde.getTime(), hasta.getTime()));
		crit.add(Restrictions.between("fVigHasta", fechaDesde, fechaHasta));
		crit.addOrder(Order.asc("fVigHasta"));
		return crit.list();
	}

}
