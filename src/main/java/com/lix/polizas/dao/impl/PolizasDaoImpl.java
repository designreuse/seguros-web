/*
4 * Created on 28 nov 2013 ( Time 16:19:02 )
 * Generated by Telosys Tools Generator ( version 2.0.6 )
 */
package com.lix.polizas.dao.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;

import org.hibernate.Criteria;
import org.hibernate.ScrollableResults;
import org.hibernate.criterion.Disjunction;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.lix.dao.AbstractHibernateDao;
import com.lix.polizas.dao.PolizasDao;
import com.lix.polizas.dto.PolizasDto;
import com.lix.polizas.dto.PolizasPorVencerDto;
import com.lix.polizas.model.Polizas;
import com.lix.util.BeanUtils;
import com.lix.web.Page;

/**
 * Basic persistence operations for entity "Polizas"
 * 
 * 
 * @author Lisandro
 * 
 */
@Repository("polizasDao")
public class PolizasDaoImpl extends AbstractHibernateDao<Polizas, Integer>
		implements PolizasDao {

	@PostConstruct
	public void setInstance() {
		setClazz(Polizas.class);
	}

	@Override
	@Transactional
	public List<Polizas> findByName(String name) {
		Criteria criteria = getCurrentSession().createCriteria((Polizas.class));
		// criteria.add();
		criteria.add(Restrictions.or(Restrictions.ilike("bienACubrir",
				name.toUpperCase(), MatchMode.ANYWHERE), Restrictions.ilike(
				"nroPoliza", name.toUpperCase(), MatchMode.ANYWHERE)));
		// criteria.add();
		criteria.setMaxResults(25);
		return (List<Polizas>) criteria.list();
	}

	@Override
	@Transactional
	public List<Polizas> polizasPorCliente(Integer id) {
		Criteria criteria = getCurrentSession().createCriteria((Polizas.class));
		criteria.add(Restrictions.eq("clientes.id", id));
		return (List<Polizas>) criteria.list();

	}

	@Override
	@Transactional
	public Page<PolizasDto> getPolizasPorVencerPage(PolizasPorVencerDto dto) {
		Page<PolizasDto> page = new Page<PolizasDto>();
		Criteria criteria = getPolizasPorVencerCriteria(dto.getFechaDesde(),
				dto.getFechaHasta());
		page.setPage(dto.getPage());

		ScrollableResults scrollable = criteria.scroll();
		if (scrollable.last()) {
			page.setTotalCount(scrollable.getRowNumber() + 1);
		}
		criteria = getPaginationCriteria(dto, criteria);
		List<PolizasDto> data = new ArrayList<PolizasDto>();
		for (Polizas e : (List<Polizas>) criteria.list()) {
			PolizasDto ent = BeanUtils.copyProperties(e, PolizasDto.class);
			data.add(ent);
		}
		page.setData(data);
		page.setSuccess(true);

		return page;
	}

	private Criteria getPolizasPorVencerCriteria(Date fechaDesde,
			Date fechaHasta) {
		Criteria crit = getCriteria();

		Calendar desde = Calendar.getInstance();
		desde.setTime(fechaHasta);
		desde.set(Calendar.HOUR_OF_DAY, 0);
		desde.set(Calendar.MINUTE, 0);
		desde.set(Calendar.SECOND, 0);

		Calendar hasta = Calendar.getInstance();
		hasta.setTime(fechaDesde);
		hasta.set(Calendar.HOUR_OF_DAY, 23);
		hasta.set(Calendar.MINUTE, 59);
		hasta.set(Calendar.SECOND, 59);

		crit.add(Restrictions.between("fVigHasta", fechaDesde, fechaHasta));
		crit.addOrder(Order.asc("fVigHasta"));
		return crit;
	}

	@Override
	public Page<PolizasDto> findPage(PolizasDto dto) {
		Page<PolizasDto> page = new Page<PolizasDto>();
		page.setPage(dto.getPage());
		Criteria criteria = getCriteria();

		//
		// // TODO:add additional criteria
		// Find by name
		if (org.springframework.util.StringUtils.hasText(dto.getFindByName())) {

			// criteria.add(Restrictions.or(Restrictions.ilike("nombre",
			// dto.getFindByName(), MatchMode.ANYWHERE), Restrictions
			// .ilike("apellido", dto.getFindByName(), MatchMode.ANYWHERE)));
			// criteria.add(Restrictions.ilike("nombre", dto.getFindByName(),
			// MatchMode.ANYWHERE));
			Disjunction orCriteria = Restrictions.disjunction();
			criteria.createAlias("clientes", "c");
			orCriteria.add(Restrictions.ilike("nroPoliza", dto.getFindByName()
					.toUpperCase(), MatchMode.ANYWHERE));
			orCriteria.add(Restrictions.ilike("bienACubrir", dto
					.getFindByName().toUpperCase(), MatchMode.ANYWHERE));
			orCriteria.add(Restrictions.ilike("c.nombre", dto.getFindByName()
					.toUpperCase(), MatchMode.ANYWHERE));
			orCriteria.add(Restrictions.ilike("c.apellido", dto.getFindByName()
					.toUpperCase(), MatchMode.ANYWHERE));
			orCriteria.add(Restrictions.ilike("patente", dto.getFindByName()
					.toUpperCase(), MatchMode.ANYWHERE));

			criteria.add(orCriteria);

		}
		if (dto.getClientes() != null && dto.getClientes().getId() != null) {
			criteria.add(Restrictions.eq("clientes.id", dto.getClientes()
					.getId()));
		}
		//
		ScrollableResults scrollable = criteria.scroll();
		if (scrollable.last()) {
			page.setTotalCount(scrollable.getRowNumber() + 1);
		}
		criteria = getPaginationCriteria(dto, criteria);
		List<PolizasDto> data = new ArrayList<PolizasDto>();
		for (Polizas e : (List<Polizas>) criteria.list()) {
			PolizasDto ent = BeanUtils.copyProperties(e, PolizasDto.class);
			data.add(ent);
		}
		page.setData(data);
		page.setSuccess(true);
		// // return (List<Modules>) criteria.list();
		return page;
	}

	@Override
	public List<Polizas> getPolizasPorVencerList(PolizasPorVencerDto dto) {
		return getPolizasPorVencerCriteria(dto.getFechaDesde(),
				dto.getFechaHasta()).list();
	}
}
