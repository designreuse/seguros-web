/*
 * Created on 28 nov 2013 ( Time 16:18:58 )
 * Generated by Telosys Tools Generator ( version 2.0.6 )
 */

package com.lix.polizas.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.lix.dto.DefaultResponse;
import com.lix.pagospolizas.dao.PagosPolizasDao;
import com.lix.pagospolizas.model.PagosPolizas;
import com.lix.polizas.dao.PolizasDao;
import com.lix.polizas.dto.PolizasDto;
import com.lix.polizas.dto.PolizasPorVencerDto;
import com.lix.polizas.model.Polizas;
import com.lix.polizas.service.PolizasService;
import com.lix.service.GenericService;
import com.lix.util.BeanUtils;
import com.lix.web.Page;

/**
 * JPA implementation for basic persistence operations ( entity "Polizas" )
 * 
 * @author Telosys Tools Generator
 * 
 */

@Component("polizasService")
public class PolizasServiceImpl extends GenericService<Polizas, Integer>
		implements PolizasService {

	private static final Logger LOGGER = LoggerFactory
			.getLogger(PolizasServiceImpl.class);

	@Autowired
	PolizasDao polizasDao;
	@Autowired
	PagosPolizasDao pagosPolizasDao;

	@Override
	public DefaultResponse createOrUpdate(PolizasDto dto) {
		DefaultResponse response = new DefaultResponse();
		try {
			Polizas ent = BeanUtils.mapper.map(dto, Polizas.class);
			ent = this.update(ent);
			response.setId(ent.getId());
		} catch (Exception e) {
			response.setSuccess(false);
			response.setMessage(e.getMessage());
		}
		return response;
	}

	@Override
	public List<Polizas> findByName(String name) {
		return polizasDao.findByName(name);

	}

	@Override
	public List<Polizas> polizasPorCliente(Integer id) {
		return polizasDao.polizasPorCliente(id);
	}

	@Override
	public void setDao() {
		this.dao = polizasDao;

	}

	@Override
	public List<Polizas> getPolizasPorVencer(PolizasPorVencerDto dto) {
		return polizasDao.getPolizasPorVencer(dto.getFechaDesde(),
				dto.getFechaHasta());
	}

	@Override
	@Transactional
	public Page<PolizasDto> findPage(PolizasDto dto) {
		return polizasDao.findPage(dto);
	}

	@Override
	@Transactional
	public void crearPlanDePagos(Integer idPoliza, Date fechaPrimerVencimiento)
			throws Exception {
		Calendar cal = Calendar.getInstance();
		cal.setTime(fechaPrimerVencimiento);
		Polizas poliza = this.getById(idPoliza);
		if (poliza.getCantCuotas() == null) {
			LOGGER.error("intentando generar plan de pagos con poliza sin cantidad de cuotas, se lanza excepcion");
			throw new Exception(
					"La ingrese la cantidad de cuotas de la poliza, guardela y vuelva a intentar");
		}
		int start = 0;
		// Pagos Existentes
		if (poliza.getPagosPolizas() != null
				&& !poliza.getPagosPolizas().isEmpty()) {
			start = poliza.getPagosPolizas().size();
			List<PagosPolizas> pagosExistentes = ordenarPagosPorNroRecibo(poliza
					.getPagosPolizas());
			for (PagosPolizas pagoPoliza : pagosExistentes) {
				pagoPoliza.setFechaVencimiento(cal.getTime());
				cal.add(Calendar.MONTH, 1);
				pagosPolizasDao.save(pagoPoliza);
			}
		} else {
			poliza.setPagosPolizas(new ArrayList<PagosPolizas>());
		}
		// Agrego más pagos
		for (int i = start; i < poliza.getCantCuotas(); i++) {
			PagosPolizas p = new PagosPolizas();
			p.setFechaVencimiento(cal.getTime());
			p.setNroRecibo(i + 1);
			p.setImporte(0.0d);
			p.setConcepto("");
			p.setPolizas(poliza);
			cal.add(Calendar.MONTH, 1);
			poliza.getPagosPolizas().add(p);
			pagosPolizasDao.save(p);
		}

	}

	private List<PagosPolizas> ordenarPagosPorNroRecibo(List<PagosPolizas> pagos) {
		List<PagosPolizas> pagosOrdenados = new ArrayList<PagosPolizas>(pagos);

		Collections.sort(pagosOrdenados, new Comparator() {
			public int compare(final Object o1, final Object o2) {
				return ((PagosPolizas) o1).getNroRecibo()
						- ((PagosPolizas) o2).getNroRecibo();
			}
		});
		return pagosOrdenados;
	}
}
